volumes:
  grafana_data: {}

networks:
  front-tier:
  back-tier:

services:
  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - back-tier
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    networks:
      - back-tier
      - front-tier

  mlflow:
    build:
      context: mlflow
      dockerfile: Dockerfile
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST_DOCKER}
      POSTGRES_DB: ${POSTGRES_DB}
      AZURE_STORAGE_CONNECTION_STRING: ${AZURE_STORAGE_CONNECTION_STRING}
    networks:
      - back-tier
    ports:
      - "5001:5001"
    depends_on:
      db:
        condition: service_healthy


  prediction_service:
    build:
      context: prediction_service
      dockerfile: Dockerfile
    restart: always
    environment:
      TRACKING_URL: ${TRACKING_URL_DOCKER}
      MODEL_REGISTRY_NAME: ${MODEL_REGISTRY_NAME}
      AZURE_STORAGE_CONNECTION_STRING: ${AZURE_STORAGE_CONNECTION_STRING}
    networks:
      - back-tier
    ports:
      - "9696:9696"
    entrypoint: gunicorn --bind=0.0.0.0:9696 app:app


  # grafana:
  #   image: grafana/grafana
  #   restart: always
  #   user: "472"
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - back-tier
  #     - front-tier


  # evidently_service:
  #   build:
  #     context: evidently_grafana_monitoring_service
  #     dockerfile: Dockerfile
  #   depends_on:
  #     - grafana
  #   ports:
  #     - "8085:8085"
  #   networks:
  #     - back-tier
  #     - front-tier

  real_data_simulator:
    build:
      context: real_data_simulator
      dockerfile: Dockerfile
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST_DOCKER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_TABLE: ${POSTGRES_TABLE}
      PREDICTION_SERVICE_URL: ${PREDICTION_SERVICE_URL_DOCKER}
      DATA_TIMEZONE: ${DATA_TIMEZONE}
    networks:
      - back-tier
    ports:
      - "7777:7777"
    entrypoint: python real_data_sim.py


  # batchdatasim:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   networks:
  #     - back-tier
  #   ports:
  #     - "8000:8000"
  #   restart: no

  # prometheus:
  #   image: prom/prometheus
  #   volumes:
  #     - ./prometheus/:/etc/prometheus/
  #     - ./prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/usr/share/prometheus/console_libraries'
  #     - '--web.console.templates=/usr/share/prometheus/consoles'
  #   ports:
  #     - 9090:9090
  #   networks:
  #     - back-tier
  #     - front-tier
  #   restart: unless-stopped
